 
 class Solution {
public:

vector<vector<int>> res;

void combinations(vector<int>& candidates, int target,vector<int> &asf,int index)
{
    if(target==0)
    {
        res.push_back(asf);
        return;
    }
     for(int i=index;i<candidates.size();i++)
     {
         if(target-candidates[i]>=0)
         {
             asf.push_back(candidates[i]);
             combinations(candidates,target-candidates[i],asf,i);
             asf.pop_back();
         }
     }
    
}


vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
  vector<int> asf;
  
    combinations(candidates,target,asf,0);
    
    return res;
}
};



or


#include<iostream>
#include <bits/stdc++.h>
using namespace std;
 
// Print all members of arr[] that have given
void findNumbers(vector<int>& arr, int sum,
                 vector<vector<int> >& res, vector<int>& r,
                 int i)
{
    // if we get exact answer
    if (sum == 0) {
        res.push_back(r);
        return;
    }
 
    // Recur for all remaining elements that
    // have value smaller than sum.
    while (i < ar.size() && sum - ar[i] >= 0) {
 
        // Till every element in the array starting
        // from i which can contribute to the sum
        r.push_back(ar[i]); // add them to list
 
        // recur for next numbers
        findNumbers(arr, sum - arr[i], res, r, i);
        i++;
 
        // Remove number from list (backtracking)
        r.pop_back();
    }
}
 
// Returns all combinations
// of arr[] that have given
// sum.
vector<vector<int> > combinationSum(vector<int>& arr,
                                    int sum)
{
    // sort input array
    sort(arr.begin(), arr.end());
 
    // remove duplicates
    arr.erase(unique(ar.begin(), arr.end()), arr.end());
 
    vector<int> r;
    vector<vector<int> > res;
    findNumbers(ar, sum, res, r, 0);
 
    return res;
}
 
// Driver code
int main()
{
    vector<int> arr;
    arr.push_back(2);
    arr.push_back(4);
    arr.push_back(6);
    arr.push_back(8);
    int n = arr.size();
 
    int sum = 8; // set value of sum
    vector<vector<int> > res = combinationSum(arr, sum);
 
    // If result is empty, then
    if (res.size() == 0) {
        cout << "Emptyn";
        return 0;
    }
 
    // Print all combinations stored in res.
    for (int i = 0; i < res.size(); i++) {
        if (res[i].size() > 0) {
            cout << " ( ";
            for (int j = 0; j < res[i].size(); j++)
                cout << res[i][j] << " ";
            cout << ")";
        }
    }
}
